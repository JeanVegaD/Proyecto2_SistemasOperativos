/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.awt.List;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import LOGIC.Process;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jean
 */
public class config extends javax.swing.JFrame {

    int mainMemory = 128;
    int virtualMemory = 512;
    int memoryFixed = 0;
    int memoryPagination = 0;
    int quantum = 0;
    ArrayList<Integer> mainSegmentation = new ArrayList<Integer>();
    ArrayList<Integer> virtualSegmentation = new ArrayList<Integer>();

    DefaultListModel modelMainSegmentation = new DefaultListModel();
    DefaultListModel modelVirtualegmentation = new DefaultListModel();

    ArrayList<String> validActions2 = new ArrayList<>();
    ArrayList<String> validActions3 = new ArrayList<>();
    ArrayList<String> validRegister = new ArrayList<>();

    ArrayList<Process> loadedFiles = new ArrayList<>();
    DefaultTableModel modelFiles;

    home homeWindow;

    public config() {
        try {
            setLocationRelativeTo(null);
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }

        initComponents();
        fillCombos();

        validActions2.add("LOAD");
        validActions2.add("STORE");
        validActions2.add("ADD");
        validActions2.add("SUB");
        validActions2.add("JUM");
        validActions2.add("PUSH");
        validActions2.add("POP");

        validActions2.add("INT");

        validActions2.add("JE");
        validActions2.add("JNE");

        validActions3.add("MOV");
        validActions3.add("CMP");

        validRegister.add("AX");
        validRegister.add("BX");
        validRegister.add("CX");
        validRegister.add("DX");

        modelFiles = (DefaultTableModel) tbl_files.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        memoryAssigment = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txt_mainMemory = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        cmb_algorithms = new javax.swing.JComboBox<>();
        lbl_quantum = new javax.swing.JLabel();
        txt_quantum = new javax.swing.JTextField();
        cmb_fixed = new javax.swing.JRadioButton();
        cmb_dynamic = new javax.swing.JRadioButton();
        cmb_pagination = new javax.swing.JRadioButton();
        cmb_segmentation = new javax.swing.JRadioButton();
        txt_addVirtaulMemory = new javax.swing.JTextField();
        txt_virtualMemory = new javax.swing.JTextField();
        txt_fixedMemory = new javax.swing.JTextField();
        btn_addVirtualMemory = new javax.swing.JButton();
        txt_addMainMemory = new javax.swing.JTextField();
        btn_addMainMemory = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_virtualMemory = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_mainMemory = new javax.swing.JList<>();
        jSeparator2 = new javax.swing.JSeparator();
        txt_paginationMemory = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        lbl_showVirtualMemory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_files = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        btn_saveChanges = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        lbl_showMainMemory = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(69, 90, 100));
        jButton1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Set");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, 300, 30));

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(69, 90, 100));
        jLabel2.setText("Size of memories");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 220, -1));

        jLabel19.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(69, 90, 100));
        jLabel19.setText("Load Files");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 290, 40));

        txt_mainMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_mainMemoryActionPerformed(evt);
            }
        });
        txt_mainMemory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_mainMemoryKeyPressed(evt);
            }
        });
        jPanel1.add(txt_mainMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 140, 30));

        jLabel18.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(69, 90, 100));
        jLabel18.setText("Virtual memory");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, 150, 33));

        jLabel20.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(69, 90, 100));
        jLabel20.setText("Main memory");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 150, 33));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 260, 340, 10));

        jLabel21.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(69, 90, 100));
        jLabel21.setText(" Planning algorithm");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 280, 260, 40));

        cmb_algorithms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmb_algorithms.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_algorithmsItemStateChanged(evt);
            }
        });
        jPanel1.add(cmb_algorithms, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 300, 30));

        lbl_quantum.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        lbl_quantum.setForeground(new java.awt.Color(69, 90, 100));
        lbl_quantum.setText("Quantum:");
        lbl_quantum.setEnabled(false);
        jPanel1.add(lbl_quantum, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 370, 90, 33));

        txt_quantum.setText("0");
        txt_quantum.setEnabled(false);
        jPanel1.add(txt_quantum, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 370, 200, 33));

        cmb_fixed.setBackground(new java.awt.Color(255, 255, 255));
        cmb_fixed.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        cmb_fixed.setForeground(new java.awt.Color(69, 90, 100));
        cmb_fixed.setText("Fixed");
        cmb_fixed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmb_fixedMousePressed(evt);
            }
        });
        cmb_fixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_fixedActionPerformed(evt);
            }
        });
        jPanel1.add(cmb_fixed, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        cmb_dynamic.setBackground(new java.awt.Color(255, 255, 255));
        cmb_dynamic.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        cmb_dynamic.setForeground(new java.awt.Color(69, 90, 100));
        cmb_dynamic.setSelected(true);
        cmb_dynamic.setText("Dynamic");
        cmb_dynamic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmb_dynamicMousePressed(evt);
            }
        });
        cmb_dynamic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_dynamicActionPerformed(evt);
            }
        });
        jPanel1.add(cmb_dynamic, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        cmb_pagination.setBackground(new java.awt.Color(255, 255, 255));
        cmb_pagination.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        cmb_pagination.setForeground(new java.awt.Color(69, 90, 100));
        cmb_pagination.setText("Pagination");
        cmb_pagination.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmb_paginationMousePressed(evt);
            }
        });
        cmb_pagination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_paginationActionPerformed(evt);
            }
        });
        jPanel1.add(cmb_pagination, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        cmb_segmentation.setBackground(new java.awt.Color(255, 255, 255));
        cmb_segmentation.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        cmb_segmentation.setForeground(new java.awt.Color(69, 90, 100));
        cmb_segmentation.setText("Segmentation");
        cmb_segmentation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmb_segmentationMousePressed(evt);
            }
        });
        cmb_segmentation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_segmentationActionPerformed(evt);
            }
        });
        jPanel1.add(cmb_segmentation, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, -1));

        txt_addVirtaulMemory.setText("128");
        txt_addVirtaulMemory.setEnabled(false);
        txt_addVirtaulMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_addVirtaulMemoryActionPerformed(evt);
            }
        });
        jPanel1.add(txt_addVirtaulMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, 70, 30));

        txt_virtualMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_virtualMemoryActionPerformed(evt);
            }
        });
        txt_virtualMemory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_virtualMemoryKeyPressed(evt);
            }
        });
        jPanel1.add(txt_virtualMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, 140, 30));

        txt_fixedMemory.setEnabled(false);
        txt_fixedMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_fixedMemoryActionPerformed(evt);
            }
        });
        jPanel1.add(txt_fixedMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 140, 30));

        btn_addVirtualMemory.setBackground(new java.awt.Color(69, 90, 100));
        btn_addVirtualMemory.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btn_addVirtualMemory.setForeground(new java.awt.Color(255, 255, 255));
        btn_addVirtualMemory.setText("Add");
        btn_addVirtualMemory.setBorder(null);
        btn_addVirtualMemory.setEnabled(false);
        btn_addVirtualMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addVirtualMemoryActionPerformed(evt);
            }
        });
        jPanel1.add(btn_addVirtualMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 280, 70, 30));

        txt_addMainMemory.setText("128");
        txt_addMainMemory.setEnabled(false);
        txt_addMainMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_addMainMemoryActionPerformed(evt);
            }
        });
        jPanel1.add(txt_addMainMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 70, 30));

        btn_addMainMemory.setBackground(new java.awt.Color(69, 90, 100));
        btn_addMainMemory.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btn_addMainMemory.setForeground(new java.awt.Color(255, 255, 255));
        btn_addMainMemory.setText("Add");
        btn_addMainMemory.setBorder(null);
        btn_addMainMemory.setEnabled(false);
        btn_addMainMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addMainMemoryActionPerformed(evt);
            }
        });
        jPanel1.add(btn_addMainMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 280, 70, 30));

        list_virtualMemory.setEnabled(false);
        jScrollPane1.setViewportView(list_virtualMemory);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, 150, -1));

        list_mainMemory.setEnabled(false);
        jScrollPane2.setViewportView(list_mainMemory);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 150, -1));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 40, -1, 430));

        txt_paginationMemory.setEnabled(false);
        txt_paginationMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_paginationMemoryActionPerformed(evt);
            }
        });
        jPanel1.add(txt_paginationMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 140, 30));

        jLabel22.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(69, 90, 100));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Virtual memor");
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 150, 33));

        lbl_showVirtualMemory.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        lbl_showVirtualMemory.setForeground(new java.awt.Color(69, 90, 100));
        lbl_showVirtualMemory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_showVirtualMemory.setText("512");
        jPanel1.add(lbl_showVirtualMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 110, 140, 33));

        tbl_files.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process", "Arrival time", "Service time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_files.setEditingColumn(1);
        jScrollPane3.setViewportView(tbl_files);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, 480, 180));

        jLabel24.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(69, 90, 100));
        jLabel24.setText("Memory assignment");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 290, 40));

        btn_saveChanges.setBackground(new java.awt.Color(69, 90, 100));
        btn_saveChanges.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btn_saveChanges.setForeground(new java.awt.Color(255, 255, 255));
        btn_saveChanges.setText("Save changes");
        btn_saveChanges.setBorder(null);
        btn_saveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveChangesActionPerformed(evt);
            }
        });
        jPanel1.add(btn_saveChanges, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 180, 40));

        jButton3.setBackground(new java.awt.Color(69, 90, 100));
        jButton3.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Load Files");
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 180, 40));

        jLabel25.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(69, 90, 100));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Main memory");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 150, 33));

        lbl_showMainMemory.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        lbl_showMainMemory.setForeground(new java.awt.Color(69, 90, 100));
        lbl_showMainMemory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_showMainMemory.setText("128");
        jPanel1.add(lbl_showMainMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, 140, 33));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 710, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void fillCombos() {
        memoryAssigment.add(cmb_fixed);
        memoryAssigment.add(cmb_dynamic);
        memoryAssigment.add(cmb_pagination);
        memoryAssigment.add(cmb_segmentation);

        ArrayList<String> algorithms = new ArrayList<String>();
        algorithms.add("FCFS - First Come First Served");
        algorithms.add("SRT - Shortest Remaining Time");
        algorithms.add("SJF - Shortest Job First");
        algorithms.add("RR - Round Robin");
        algorithms.add("HHRR - Highest Response Ratio Next");
        cmb_algorithms.setModel(new DefaultComboBoxModel<String>(algorithms.toArray(new String[0])));
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String txtmainMemory = txt_mainMemory.getText();
        String txtvirtualMemory = txt_virtualMemory.getText();
        if (tryParseInt(txtmainMemory) && tryParseInt(txtvirtualMemory)) {
            if(Integer.parseInt(txtmainMemory)<= Integer.parseInt(txtvirtualMemory)){
                this.mainMemory = Integer.parseInt(txtmainMemory);
                this.virtualMemory = Integer.parseInt(txtvirtualMemory);

                lbl_showMainMemory.setText(txtmainMemory);
                lbl_showVirtualMemory.setText(txtvirtualMemory);

                txt_mainMemory.setText("");
                txt_virtualMemory.setText("");

                //limpiar las segmentaciones
                mainSegmentation = new ArrayList<Integer>();
                modelMainSegmentation.clear();
                list_mainMemory.setModel(modelMainSegmentation);

                virtualSegmentation = new ArrayList<Integer>();
                modelVirtualegmentation.clear();
                list_virtualMemory.setModel(modelVirtualegmentation);
            }else{
                JOptionPane.showMessageDialog(null, "Virtual memory must be larger than main", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please set a valid main memory and virtual memory", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmb_algorithmsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_algorithmsItemStateChanged
        String chosenAlgotithm = (String) cmb_algorithms.getSelectedItem();
        if (chosenAlgotithm.equals("RR - Round Robin")) {
            txt_quantum.setEnabled(true);
            lbl_quantum.setEnabled(true);
        } else {
            txt_quantum.setEnabled(false);
            lbl_quantum.setEnabled(false);
        }
    }//GEN-LAST:event_cmb_algorithmsItemStateChanged

    private void cmb_paginationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_paginationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_paginationActionPerformed

    private void cmb_segmentationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_segmentationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_segmentationActionPerformed

    private void cmb_fixedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_fixedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_fixedActionPerformed

    private void cmb_dynamicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_dynamicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_dynamicActionPerformed

    private void txt_addVirtaulMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_addVirtaulMemoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_addVirtaulMemoryActionPerformed

    private void txt_fixedMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_fixedMemoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fixedMemoryActionPerformed

    private void txt_addMainMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_addMainMemoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_addMainMemoryActionPerformed

    private void txt_paginationMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_paginationMemoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_paginationMemoryActionPerformed

    private void cmb_segmentationMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmb_segmentationMousePressed
        txt_fixedMemory.setEnabled(false);
        txt_paginationMemory.setEnabled(false);

        txt_addMainMemory.setEnabled(true);
        btn_addMainMemory.setEnabled(true);
        list_mainMemory.setEnabled(true);

        txt_addVirtaulMemory.setEnabled(true);
        btn_addVirtualMemory.setEnabled(true);
        list_virtualMemory.setEnabled(true);
    }//GEN-LAST:event_cmb_segmentationMousePressed

    private void cmb_paginationMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmb_paginationMousePressed
        txt_fixedMemory.setEnabled(false);
        txt_paginationMemory.setEnabled(true);

        txt_addMainMemory.setEnabled(false);
        btn_addMainMemory.setEnabled(false);
        list_mainMemory.setEnabled(false);

        txt_addVirtaulMemory.setEnabled(false);
        btn_addVirtualMemory.setEnabled(false);
        list_virtualMemory.setEnabled(false);
    }//GEN-LAST:event_cmb_paginationMousePressed

    private void cmb_fixedMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmb_fixedMousePressed
        txt_fixedMemory.setEnabled(true);
        txt_paginationMemory.setEnabled(false);

        txt_addMainMemory.setEnabled(false);
        btn_addMainMemory.setEnabled(false);
        list_mainMemory.setEnabled(false);

        txt_addVirtaulMemory.setEnabled(false);
        btn_addVirtualMemory.setEnabled(false);
        list_virtualMemory.setEnabled(false);
    }//GEN-LAST:event_cmb_fixedMousePressed

    private void cmb_dynamicMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmb_dynamicMousePressed
        txt_fixedMemory.setEnabled(false);
        txt_paginationMemory.setEnabled(false);

        txt_addMainMemory.setEnabled(false);
        btn_addMainMemory.setEnabled(false);
        list_mainMemory.setEnabled(false);

        txt_addVirtaulMemory.setEnabled(false);
        btn_addVirtualMemory.setEnabled(false);
        list_virtualMemory.setEnabled(false);
    }//GEN-LAST:event_cmb_dynamicMousePressed

    private void btn_addMainMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addMainMemoryActionPerformed
        String textVar = txt_addMainMemory.getText();
        if (!textVar.equals("")) {
            if (tryParseInt(textVar)) {
                if (canInsertSegmantation(mainSegmentation, mainMemory, Integer.parseInt(textVar))) {
                    mainSegmentation.add(Integer.parseInt(textVar));
                    modelMainSegmentation.add(modelMainSegmentation.getSize(), textVar);
                    list_mainMemory.setModel(modelMainSegmentation);
                } else {
                    JOptionPane.showMessageDialog(null, "Check memory size of segmentation", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Input must be a number", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalid number", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_addMainMemoryActionPerformed

    private void btn_addVirtualMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addVirtualMemoryActionPerformed
        String textVar = txt_addVirtaulMemory.getText();
        if (!textVar.equals("")) {
            if (tryParseInt(textVar)) {
                if (canInsertSegmantation(virtualSegmentation, virtualMemory, Integer.parseInt(textVar))) {
                    virtualSegmentation.add(Integer.parseInt(textVar));
                    modelVirtualegmentation.add(modelVirtualegmentation.getSize(), textVar);
                    list_virtualMemory.setModel(modelVirtualegmentation);
                } else {
                    JOptionPane.showMessageDialog(null, "Check memory size of segmentation", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Input must be a number", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalid number", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_addVirtualMemoryActionPerformed

    private void txt_virtualMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_virtualMemoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_virtualMemoryActionPerformed

    private void txt_mainMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_mainMemoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_mainMemoryActionPerformed

    private void txt_mainMemoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mainMemoryKeyPressed
        this.mainMemory = 0;
    }//GEN-LAST:event_txt_mainMemoryKeyPressed

    private void txt_virtualMemoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_virtualMemoryKeyPressed
        this.virtualMemory = 0;
    }//GEN-LAST:event_txt_virtualMemoryKeyPressed

    private boolean canInsertSegmantation(ArrayList<Integer> typeOfMemory, int checkMemory, int sizeOfSegmentation) {
        int currentSize = 0;
        for (Integer num : typeOfMemory) {
            currentSize += num;
        }
        if (sizeOfSegmentation > 0) {
            if (checkMemory - currentSize >= sizeOfSegmentation) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    private void btn_saveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveChangesActionPerformed
        if (mainMemory > 0 && virtualMemory > 0) {
            if (validateMemoryAssaigment()) {
                if (validatePlaningAlgorithm()) {
                    if (loadedFiles.size() > 0) {
                        if (validInitTimeForProcess()) {

                            homeWindow = new home(
                                    mainMemory,
                                    virtualMemory,
                                    String.valueOf(cmb_algorithms.getSelectedItem()),
                                    quantum,
                                    getTypeOfMemoryAssigment(),
                                    txt_fixedMemory.getText(),
                                    txt_paginationMemory.getText(),
                                    mainSegmentation,
                                    virtualSegmentation,
                                    loadedFiles
                            );
                            
                            homeWindow.setVisible(true);
                            this.setVisible(false);
                        } else {
                            JOptionPane.showMessageDialog(null, "Please set a init time for first 5 process", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please load valid files", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please check planning algorithm", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please check memory assignment", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please set main and virtual memory", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_saveChangesActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "ASM FILES", "asm", "asm");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File[] files = chooser.getSelectedFiles();
            boolean res = true;
            String invalidFile = "";

            for (int i = 0; i < files.length; i++) {
                File temp = files[i];
                if (!validateFile(temp)) {
                    res = false;
                    invalidFile = temp.toString();
                }
            }

            if (res) {
                clearTable(modelFiles);
                loadedFiles = new ArrayList<>();
                for (int i = 0; i < files.length; i++) {
                    File temp = files[i];
                    Process tempProcess = new Process(i,temp);
                    loadedFiles.add(tempProcess);
                    Object[] objectData = new Object[]{temp.getName(), "", tempProcess.getBurstTime()};
                    modelFiles.addRow(objectData);
                }
                tbl_files.setModel(modelFiles);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid file:" + invalidFile, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private boolean tryParseInt(String value) {
        try {
            Integer.parseInt(value);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean validateFile(File inputFile) {
        ArrayList<String> instructionsFromFile;
        boolean res = true;

        try {
            instructionsFromFile = (ArrayList<String>) Files.readAllLines(inputFile.toPath(), StandardCharsets.UTF_8);//lectura del archivo
        } catch (Exception ex) {
            return false;
        }

        for (String instruction : instructionsFromFile) {
            String line = "";
            instruction = instruction.replace(",", "");
            String[] subinst = instruction.split("\\s+");
            //System.out.println(Arrays.toString(subinst));
            if (validActions2.contains(subinst[0].toUpperCase()) && subinst.length == 2) {
                if (subinst[0].toUpperCase().equals("INT")) {
                    if (subinst[1].toUpperCase().equals("20H") || subinst[1].toUpperCase().equals("09H")) {
                        res = true;
                    } else {
                        return false;
                    }
                } else if (subinst[0].toUpperCase().equals("JE") || subinst[0].toUpperCase().equals("JNE") || subinst[0].toUpperCase().equals("JUM")) {
                    if (!tryParseInt(subinst[1])) {
                        return false;
                    }
                } else {
                    if (!validRegister.contains(subinst[1].toUpperCase())) {
                        return false;
                    }
                }
            } else if (validActions3.contains(subinst[0].toUpperCase()) && subinst.length == 3) {
                if (validRegister.contains(subinst[1].toUpperCase()) && validRegister.contains(subinst[2].toUpperCase())) {
                    res = true;
                } else {
                    return false;
                }
            }else if (subinst[0].toUpperCase().equals("PARAM")) {
                if(subinst.length == 2){
                    if (!tryParseInt(subinst[1])) {
                        return false;
                    }
                }
                else if(subinst.length == 3){
                    if (!tryParseInt(subinst[1]) || !tryParseInt(subinst[2])) {
                        return false;
                    }
                    
                }else if(subinst.length == 4){
                     if (!tryParseInt(subinst[1]) || !tryParseInt(subinst[2])  || !tryParseInt(subinst[3]) ) {
                        return false;
                    }
                }
            }
            else{
                return false;
            }
        }
        return res;
    }

    private void clearTable(DefaultTableModel p_model) {
        if (p_model.getRowCount() > 0) {
            int countrows = p_model.getRowCount();
            for (int i = countrows; i > 0; i--) {
                p_model.removeRow(i - 1);
            }
        }
    }

    private boolean validateMemoryAssaigment() {
        if (cmb_fixed.isSelected()) {
            String textVar = txt_fixedMemory.getText();
            if (tryParseInt(textVar)) {
                if (Integer.parseInt(textVar) > 0 && Integer.parseInt(textVar) <= mainMemory) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else if (cmb_pagination.isSelected()) {
            String textVar = txt_paginationMemory.getText();
            if (tryParseInt(textVar)) {
                if (Integer.parseInt(textVar) > 0 && Integer.parseInt(textVar) <= mainMemory ) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else if (cmb_segmentation.isSelected()) {
            if (mainSegmentation.size() > 0 && virtualSegmentation.size() > 0) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    }

    private boolean validatePlaningAlgorithm() {
        String textVar = String.valueOf(cmb_algorithms.getSelectedItem());
        if (textVar.equals("RR - Round Robin")) {
            String quatum = txt_quantum.getText();
            if (tryParseInt(quatum)) {
                if (Integer.parseInt(quatum) > 0) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return true;
        }
    }

    public boolean validInitTimeForProcess() {
        modelFiles = (DefaultTableModel) tbl_files.getModel();
        int sizeOfModel = modelFiles.getRowCount();
        int count = 0;
        for (int i = 0; i < sizeOfModel; i++) {
            count++;
            if (count <= 5) {
                String getCell = modelFiles.getValueAt(i, 1).toString();
                if (tryParseInt(getCell)) {
                    if (Integer.parseInt(getCell) >= 0) {
                        Process temppRProcess = loadedFiles.get(i);
                        temppRProcess.setInitTime(Integer.parseInt(getCell));
                        //return true;
                    } else {
                        return false;
                    }

                } else {
                    return false;
                }
            } else {
                return true;
            }
        }
        return true;
    }

    public String getTypeOfMemoryAssigment() {
        if (cmb_fixed.isSelected()) {
            return cmb_fixed.getText();
        } else if (cmb_pagination.isSelected()) {
            return cmb_pagination.getText();
        } else if (cmb_segmentation.isSelected()) {
            return cmb_segmentation.getText();
        } else {
            return cmb_dynamic.getText();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new config().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addMainMemory;
    private javax.swing.JButton btn_addVirtualMemory;
    private javax.swing.JButton btn_saveChanges;
    private javax.swing.JComboBox<String> cmb_algorithms;
    private javax.swing.JRadioButton cmb_dynamic;
    private javax.swing.JRadioButton cmb_fixed;
    private javax.swing.JRadioButton cmb_pagination;
    private javax.swing.JRadioButton cmb_segmentation;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lbl_quantum;
    private javax.swing.JLabel lbl_showMainMemory;
    private javax.swing.JLabel lbl_showVirtualMemory;
    private javax.swing.JList<String> list_mainMemory;
    private javax.swing.JList<String> list_virtualMemory;
    private javax.swing.ButtonGroup memoryAssigment;
    private javax.swing.JTable tbl_files;
    private javax.swing.JTextField txt_addMainMemory;
    private javax.swing.JTextField txt_addVirtaulMemory;
    private javax.swing.JTextField txt_fixedMemory;
    private javax.swing.JTextField txt_mainMemory;
    private javax.swing.JTextField txt_paginationMemory;
    private javax.swing.JTextField txt_quantum;
    private javax.swing.JTextField txt_virtualMemory;
    // End of variables declaration//GEN-END:variables
}
